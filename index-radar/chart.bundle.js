/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/chart.js":
/*!**********************!*\
  !*** ./src/chart.js ***!
  \**********************/
/***/ (() => {

eval("function draw_chart(data, labels, containerId, selectId) {\n    var equities = [\"深證成指\", \"滬深300\", \"恆生指數\", \"美國標普500\", \"美國納指\", \"上證綜指\", \"國企指數\", \"歐洲斯托克50\", \"恆生科技指數\"];\n    var commodities = [\"BTC 指數\", \"WTI 原油\", \"Brent 布蘭特原油\", \"金(每百oz)\", \"銅(每磅)\", \"天然氣 (MMBtu)\"];\n    var margin = {top: 20, right: 20, bottom: 30, left: 50},\n    width = 960 - margin.left - margin.right;\n\n    var sliderWidth = width;\n    var sliderHeight = 50;\n    var sliderPadding = 10;\n\n    var colors = d3.schemeCategory10;\n\n    var height = 500 - margin.top - margin.bottom - sliderHeight - sliderPadding;\n\n    var container = d3.select(containerId)\n        .append('svg')\n        .attr('width', '100%')\n        .attr('height', height + margin.top + margin.bottom + sliderHeight + sliderPadding)\n        .style('min-width', `${(width + margin.left + margin.right) / 2}px`)\n        .attr('viewBox', `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom + sliderHeight + sliderPadding}`);\n\n    var line_chart = container\n      .append('g')\n      .attr('id', 'line_chart')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    var x = d3.scaleTime()\n    .range([0, width])\n    .domain(d3.extent(data, function(d) { return d.StrDate; }));\n\n    var y = d3.scaleLinear()\n    .range([height, 0])\n    .domain([\n      d3.min(data, function(d) {\n        return Math.min(...labels.map(label => d[label])) * 0.99;\n      }),\n      d3.max(data, function(d) {\n        return Math.max(...labels.map(label => d[label])) * 1.2;\n      })\n    ]);\n\n    var line = d3.line()\n    .x(function(d) { return x(d.StrDate); })\n    .y(function(d) { return y(d.percentage); });\n\n    var numXTicks = 20; // Adjust this value to change the number of x-axis labels\n\n    line_chart.append(\"g\")\n      .attr(\"class\", \"axis axis--x\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x).ticks(numXTicks));\n\n    line_chart.append(\"g\")\n      .attr(\"class\", \"axis axis--y\")\n      .call(d3.axisLeft(y));\n\n    labels.forEach(function(equity, index) {\n      var equityData = data.map(function(d) {\n        return {\n          StrDate: d.StrDate,\n          percentage: d[equity]\n        };\n      });\n\n      line_chart.append(\"path\")\n        .datum(equityData)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", colors[index % colors.length])\n        .attr(\"stroke-width\", 2)\n        .attr(\"d\", line)\n        .attr(\"id\", \"line_\" + index);\n    });\n\n    // Slider\n\n    var sliderScale = d3.scaleTime()\n      .domain(x.domain())\n      .range([0, sliderWidth])\n      .clamp(true);\n\n    var sliderExtraPadding = 20; // Add this variable\n\n    var slider = container.append(\"g\")\n        .attr(\"class\", \"slider\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + (height + margin.top + sliderPadding + sliderHeight + sliderExtraPadding) + \")\");\n\n    slider.append(\"line\")\n      .attr(\"class\", \"track\")\n      .attr(\"x1\", sliderScale.range()[0])\n      .attr(\"x2\", sliderScale.range()[1])\n      .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })\n      .attr(\"class\", \"track-inset\")\n      .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })\n      .attr(\"class\", \"track-overlay\")\n      .call(d3.drag()\n        .on(\"start.interrupt\", function() { slider.interrupt(); })\n        .on(\"start drag\", function() {\n          updateChart(sliderScale.invert(d3.event.x), labels);\n        }));\n\n    d3.select(\"#chart > svg > g.slider\")\n      .insert(\"rect\", \"line.track\") // Insert the rect element before the track element\n      .classed(\"track-background\", true) // Add the \"track-background\" class to the rect element\n      .attr(\"x\", 0)\n      .attr(\"y\", -10)\n      .attr(\"width\", 890)\n      .attr(\"height\", 20)\n      .attr(\"rx\", 10)\n      .attr(\"ry\", 10);\n\n    var handle = slider.append(\"rect\")\n      .attr(\"class\", \"handle\")\n      .attr(\"width\", 20)\n      .attr(\"height\", 20)\n      .attr(\"rx\", 3)\n      .attr(\"ry\", 3)\n      .attr(\"y\", -10);\n\n    function getMinValue(d) {\n      let min = Infinity;\n      for (const key in d) {\n        if (typeof d[key] === 'number' && d[key] < min) {\n          min = d[key];\n        }\n      }\n      return min;\n    }\n\n    function getMaxValue(d) {\n      let max = -Infinity;\n      for (const key in d) {\n        if (typeof d[key] === 'number' && d[key] > max) {\n          max = d[key];\n        }\n      }\n      return max;\n    }\n\n    function updateChart(newDate, labels) {\n      var filteredData = data.filter(function(d) { return d.StrDate >= newDate; });\n\n      var newYMin = d3.min(filteredData, function(d) {\n        return Math.min(...labels.map(label => d[label]));\n      });\n      var newYMax = d3.max(filteredData, function(d) {\n        return Math.max(...labels.map(label => d[label]));\n      });\n\n      y.domain([newYMin * 0.99, newYMax * 1.01]);\n\n      x.domain([newDate, d3.max(filteredData, function(d) { return d.StrDate; })]); // Update the x-axis domain using the filtered data\n\n      line_chart.select(\".axis--x\")\n        .transition().duration(500) // Add transition for smooth axis update\n        .call(d3.axisBottom(x).tickSizeOuter(0));\n\n      line_chart.select(\".axis--y\")\n        .transition().duration(500) // Add transition for smooth axis update\n        .call(d3.axisLeft(y).tickSizeOuter(0).tickFormat(d3.format(\".2f\"))); // Add tickFormat here\n\n      labels.forEach(function(equity, index) {\n        var equityData = filteredData.map(function(d) { // Use the filteredData here\n            return {\n                StrDate: d.StrDate,\n                percentage: d[equity]\n            };\n        });\n\n        // Update the line function to use the new x and y scales\n        var updatedLine = d3.line()\n        .x(function(d) { return x(d.StrDate); })\n        .y(function(d) { return y(d.percentage); });\n\n        line_chart.select(\"#line_\" + index)\n          .datum(equityData)\n          .attr(\"d\", updatedLine); // Use the updated line function here\n      });\n\n      handle.attr(\"x\", sliderScale(newDate) - 10);\n    }\n\n    // Add chartId parameter to the toggleEquity function\n    function toggleEquity(chartId, index) {\n      var line = d3.select(chartId + ' #line_' + index);\n      // Match the new select box IDs based on the chartId\n      var selectBox = d3.select('#selectBox_' + chartId.replace('#', '') + '_' + index).node();\n      line.style('display', selectBox.checked ? 'block' : 'none');\n    }\n\n    // Add chartId parameter to the createSelectBoxAndLegend function\n    function createSelectBoxAndLegend(chartId, selectId) {\n      var container = d3.select(selectId);\n\n      labels.forEach(function (equity, index) {\n        var equityContainer = container.append('div').attr('class', 'equity-container');\n\n        // Generate a unique ID for each select box based on the chartId\n        var selectBoxId = 'selectBox_' + chartId.replace('#', '') + '_' + index;\n\n        var selectBox = equityContainer.append('input')\n          .attr('type', 'checkbox')\n          .attr('id', selectBoxId)\n          .attr('checked', true)\n          .on('change', function () {\n            toggleEquity(chartId, index); // Pass the chartId to the toggleEquity function\n          });\n\n        var label = equityContainer.append('label')\n          .attr('for', 'selectBox_' + index)\n          .style('color', colors[index % colors.length])\n          .text(equity);\n      });\n    }\n\n    createSelectBoxAndLegend(containerId, selectId);\n  }\n\n\nvar equities = [\"深證成指\", \"滬深300\", \"恆生指數\", \"美國標普500\", \"美國納指\", \"上證綜指\", \"國企指數\", \"歐洲斯托克50\", \"恆生科技指數\"];\n\n d3.csv(\"data/pequity.csv\", function(d) {\n    d.Date = +d.Date;\n    d.StrDate = d3.timeParse(\"%m/%d/%Y\")(d.StrDate);\n    d.深證成指 = +d.深證成指;\n    d.滬深300 = +d.滬深300;\n    d.恆生指數 = +d.恆生指數;\n    d.美國標普500 = +d.美國標普500;\n    d.美國納指 = +d.美國納指;\n    d.上證綜指 = +d.上證綜指;\n    d.國企指數 = +d.國企指數;\n    d.歐洲斯托克50 = +d.歐洲斯托克50;\n    d.恆生科技指數 = +d.恆生科技指數;\n    return d;\n  }).then(function(data) {\n    draw_chart(data, equities, \"#chart\", \"#selectBoxContainer\");\n  }).catch(function(error) {\n    console.error(\"Error loading the data:\", error);\n  });\n\n\nvar commodities = [\"BTC 指數\", \"WTI 原油\", \"Brent 布蘭特原油\", \"金(每百oz)\", \"銅(每磅)\", \"天然氣 (MMBtu)\"];\n\n d3.csv(\"data/pcommodities.csv\", function(d) {\n    d.Date = +d.Date;\n    d.StrDate = d3.timeParse(\"%m/%d/%Y\")(d.StrDate);\n    d[\"BTC 指數\"] = +d[\"BTC 指數\"];\n    d[\"WTI 原油\"] = +d[\"WTI 原油\"];\n    d[\"Brent 布蘭特原油\"] = +d[\"Brent 布蘭特原油\"];\n    d[\"金(每百oz)\"] = +d[\"金(每百oz)\"];\n    d[\"銅(每磅)\"] = +d[\"銅(每磅)\"];\n    d[\"天然氣 (MMBtu)\"] = +d[\"天然氣 (MMBtu)\"];\n    return d;\n  }).then(function(data) {\n    draw_chart(data, commodities, \"#chart2\", \"#selectBoxContainer2\");\n  }).catch(function(error) {\n    console.error(\"Error loading the data:\", error);\n  });\n\n\n//# sourceURL=webpack://radar-index/./src/chart.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/chart.js"]();
/******/ 	
/******/ })()
;